@page "/login"
@using Microsoft.AspNetCore.Components.Authorization;
@layout BlazorTest.Client.Shared.EmptyLayout


<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-6 col-xl-3">

            <EditForm Model="@userLogin" OnValidSubmit="LoginProcess">
                <DataAnnotationsValidator/>
                <div class="form-group">   
                    <!--bind-value cift tarafli bining icin -->
                    <input @bind-value="userLogin.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address">
                </div>

                <div class="form-group">
                    <!--bind-value cift tarafli bining icin -->
                    <input @bind-value="userLogin.Password" class="form-control form-control-lg" type="password" placeholder="Password">
                </div>

                <div class="form-group">
                    <!--bind-value cift tarafli bining icin -->
                    <button class="btn btn-info btn-block">Login</button>
                </div>

            </EditForm>

        </div>

    </div>
</div>


@code {
    [Inject]
    HttpClient client{ get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    ILocalStorageService localStorage{ get; set; }

    [Inject]
    AuthenticationStateProvider authStateProvider { get; set; }

    private UserLoginRequestDTO userLogin = new UserLoginRequestDTO();

    private async Task LoginProcess()
    {
        var response = await client.PostAsJsonAsync<UserLoginRequestDTO>("api/User/Login", userLogin);
        if (response.IsSuccessStatusCode)
        {
            var res = await response.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();
            if (res.Success)
            {
                //tokeni localstorage kayit ediyruz butun sayfalarda kullanabilmek icin.
                await localStorage.SetItemAsStringAsync("token", res.Data.ApiToken);
                await localStorage.SetItemAsStringAsync("UserMail", res.Data.User.EmailAdress);
                await localStorage.SetItemAsync("UserId", res.Data.User.Id.ToString());
                await localStorage.SetItemAsync("UserFullName", res.Data.User.FullName);
                (authStateProvider as AuthStateProvider).NotifyUserLogin(res.Data.User.EmailAdress);
                //burada tokeni set ediyoruz.Buradan da app.razora gidiyoruz.AuthorizeRouteView ekliyoruz.

                client.DefaultRequestHeaders.Authorization = 
                                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",res.Data.ApiToken);
                Navigation.NavigateTo("/");
            }
            else
            {
                await ModalManager.ShowMessageAsync("Error Login", res.Message);
            }
        }

    }
}
